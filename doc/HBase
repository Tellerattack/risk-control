create 'service', 'info'
alter  'service', {NAME => 'info', TTL => '15552000'}

create 'opcode', 'info'
alter  'opcode', {NAME => 'info', TTL => '15552000'}


hbase:
  zookeeper:
    quorum: 10.174.25.117,10.174.25.118,10.174.25.119,10.174.25.120,10.174.25.121
    property:
      clientPort: 2181

zookeeper:
  znode:
    parent: /hbase

hbaseTemplate.put("service", rowName, "info", "cnt", String.valueOf(cnt).getBytes());


@Configuration
public class HBaseConfig {

	@Value("${hbase.zookeeper.quorum}")
	private String zookeeperQuorum;

	@Value("${hbase.zookeeper.property.clientPort}")
	private String clientPort;

	@Value("${zookeeper.znode.parent}")
	private String znodeParent;

	@Bean
	public HbaseTemplate hbaseTemplate() {
		org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration();
		conf.set("hbase.zookeeper.quorum", zookeeperQuorum);
		conf.set("hbase.zookeeper.property.clientPort", clientPort);
		conf.set("zookeeper.znode.parent", znodeParent);
		return new HbaseTemplate(conf);
	}

	@Bean
	public Connection hbaseConnection() {

		org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration();
		conf.set("hbase.zookeeper.quorum", zookeeperQuorum);
		conf.set("hbase.zookeeper.property.clientPort", clientPort);
		conf.set("zookeeper.znode.parent", znodeParent);
		conf.set("zookeeper.sasl.client", "false");

		try {
			return ConnectionFactory.createConnection(conf);
		} catch (IOException e) {
			System.out.println("------Hbase初始化失败");
			e.printStackTrace();
			return null;
		}
	}

}